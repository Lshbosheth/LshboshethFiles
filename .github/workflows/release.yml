name: "publish"

on:
  push:
    branches:
      - tauri

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, 'Build') && contains(github.event.head_commit.message, 'Version')"
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: '选择msi版本下载安装使用',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    if: "contains(github.event.head_commit.message, 'Build') && contains(github.event.head_commit.message, 'Version')"
    steps:
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, 'Build') && contains(github.event.head_commit.message, 'Version')"
    needs: [create-release, build-tauri]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })

  updater:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'Build') && contains(github.event.head_commit.message, 'Version')"
    needs: [create-release, build-tauri,publish-release]

    steps:
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/checkout@v2
      - run: pnpm i
      - run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy version.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          force_orphan: true
          publish_branch: version
